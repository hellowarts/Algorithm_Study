#include <iostream>
#include <queue>
#include <vector>
#define MAX_SIZE 1001

using namespace std;

void BFS();

int N, M, result = 0;

queue<pair<int, int>> tmt;
int map[MAX_SIZE][MAX_SIZE];
int cnt[MAX_SIZE][MAX_SIZE] = { 0, };

int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };


int main(void) {
	cin >> M >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> map[i][j];
			if (map[i][j] == 1)
			{
				tmt.push({i,j});
			}
		}
	}
	BFS();
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (map[i][j] == 0 && map[i][j] != -1) {
				cout << -1;
				return 0;
			}
			if (result < cnt[i][j]) result = cnt[i][j];
		}
	}
	cout << result;

}

void BFS() {
	int x, y, nx, ny;
	while (!tmt.empty()) {
		y = tmt.front().first;
		x = tmt.front().second;
		tmt.pop();

		for (int i = 0; i < 4; i++) {
			ny = y + dy[i];
			nx = x + dx[i];

			if (0 <= nx && nx < M && 0 <= ny && ny < N) {
				if (map[ny][nx] == 0) {
					tmt.push({ ny,nx });
					map[ny][nx] = 1;
					cnt[ny][nx] = cnt[y][x] + 1;
				}
			}
		}
	}
}