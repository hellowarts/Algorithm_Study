#include <iostream>
#include <queue>
#include <tuple>
#define MAX_SIZE 101

using namespace std;

void BFS();

int N, M, H, result = 0;

queue<tuple<int, int, int>> tmt;
int map[MAX_SIZE][MAX_SIZE][MAX_SIZE];
int cnt[MAX_SIZE][MAX_SIZE][MAX_SIZE] = { 0, };

int dx[6] = { 1,0,-1,0,0,0 };
int dy[6] = { 0,1,0,-1,0,0 };
int dz[6] = { 0,0,0,0,1,-1 };


int main(void) {
	cin >> M >> N >> H;
	for (int k = 0; k < H; k++) {
		for (int j = 0; j < N; j++) {
			for (int i = 0; i < M; i++) {
				cin >> map[k][j][i];
				if (map[k][j][i] == 1) tmt.push({ k,j,i });
			}
		}
	}
	BFS();
	for (int k = 0; k < H; k++) {
		for (int j = 0; j < N; j++) {
			for (int i = 0; i < M; i++) {
				if (map[k][j][i] == 0 && map[k][j][i] != -1) {
					cout << -1;
					return 0;
				}
				if (result < cnt[k][j][i]) result = cnt[k][j][i];
			}
		}
	}
	cout << result;

}

void BFS() {
	int x, y, z, nx, ny, nz;
	while (!tmt.empty()) {
		z = get<0>(tmt.front());
		y = get<1>(tmt.front());
		x = get<2>(tmt.front());
		tmt.pop();

		for (int i = 0; i < 6; i++) {
			ny = y + dy[i];
			nx = x + dx[i];
			nz = z + dz[i];

			if (0 <= nx && nx < M && 0 <= ny && ny < N && 0 <= nz && nz < H) {
				if (map[nz][ny][nx] == 0) {
					tmt.push({ nz,ny,nx });
					map[nz][ny][nx] = 1;
					cnt[nz][ny][nx] = cnt[z][y][x] + 1;
				}
			}
		}
	}
}