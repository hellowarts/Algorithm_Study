import sys
from collections import deque
a, b = map(int, sys.stdin.readline().strip().split())
Map = [[0 for _ in range(1500)] for _ in range(1500)]
visited = [[-1 for _ in range(1500)] for _ in range(1500)]
dic = [(0, -1), (1, 0), (1, 1), (0, 1), (-1, 0), (-1, -1)]
queue = deque()
def BFS():
    while queue:
        y, x = queue.popleft()
        if Map[y][x] == b:
            tx, ty = x, y
            result = []
            while True:
                if visited[ty][tx] == 0:
                    result.append(Map[ty][tx])
                    while result:
                        print(result.pop(), end=" ")
                    break
                result.append(Map[ty][tx])
                ty, tx = visited[ty][tx]
            return
        for dx, dy in dic:
            nx, ny = x+dx, y+dy
            if nx<0 or ny <0 or nx >=1500 or ny >= 1500: continue
            if Map[ny][nx] == 0 or visited[ny][nx] != -1: continue
            visited[ny][nx] = (y, x)
            queue.append((ny, nx))
def draw():
    x, y = 750, 750
    N, K = 1, 1
    Map[y][x] = 1
    if a == 1:
        queue.append((y, x))
        visited[y][x] = 0
    while True:
        for i in range(6):
            if i == 1:
                M = K-1 # (1, 0) 가는 것만 하나 줄이면 됨
            else:
                M = K # 나머지는 레벨(K) 만큼 반복
            for j in range(M):
                dx, dy = dic[i]
                nx, ny = x+dx, y+dy
                N += 1
                Map[ny][nx] = N
                if N == a:
                    queue.append((ny, nx))
                    visited[ny][nx] = 0
                if N == 1000000:
                    return
                x = nx
                y = ny
        K += 1
draw()
BFS()
