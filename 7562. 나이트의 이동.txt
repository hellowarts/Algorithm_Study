#include <iostream>
#include <queue>
#include <cstring>
#include <tuple>
#define MAX_SIZE 301

using namespace std;

void BFS();

int I, N, M, eN, eM;

int dx[] = { -1, -2, -2, -1, 1, 2, 2, 1 };
int dy[] = { -2, -1, 1, 2, 2, 1, -1, -2 };

bool v[MAX_SIZE][MAX_SIZE] = { false, };

int main(void) {
	int K;
	cin >> K;
	for (int k = 0; k < K; k++) {
		memset(v, false, sizeof(v));
		cin >> I;
		cin >> M >> N;
		cin >> eM >> eN;
		BFS();
	}
}

void BFS() {
	queue<tuple<int,int,int>> q;
	q.push({N,M,0});
	v[N][M] = true;

	int x, y, nx, ny, cnt;
	while (!q.empty()) {
		y = get<0>(q.front());
		x = get<1>(q.front());
		cnt = get<2>(q.front());
		q.pop();

		if (x == eM && y == eN) {
			cout << cnt << endl;
			break;
		}

		for (int i = 0; i < 8; i++) {
			ny = y + dy[i];
			nx = x + dx[i];

			if (0 <= nx && nx < I && 0 <= ny && ny < I) {
				if (!v[ny][nx]) {
					v[ny][nx] = true;
					q.push({ ny,nx, cnt+1 });
				}
			}
		}
	}
}