#include <iostream>
#define MAX_SIZE 1000001
using namespace std;

int n, m, a, b;
int parent[MAX_SIZE];
int ch;

int getParent(int parent[], int x);
void unionParent(int parent[], int a, int b);
int findParent(int parent[], int a, int b);

int main(void) {
	ios_base::sync_with_stdio(0);
	cin.tie(0); 
	cout.tie(0);

	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		parent[i] = i;
	}
	for (int i = 1; i <= m; i++) {
		cin >> ch >> a >> b;

		if (ch == 0) {
			unionParent(parent, a, b);
		}
		else if (ch == 1) {
			if (findParent(parent, a, b)) {
				cout << "YES" << '\n';
			}
			else {
				cout << "NO" << '\n';
			}
		}
	}
}

int getParent(int parent[], int x) {
	if (parent[x] == x) return x;
	return parent[x] = getParent(parent, parent[x]);
}

void unionParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a < b) parent[b] = a;
	else parent[a] = b;
}

int findParent(int parent[], int a, int b) {
	a = getParent(parent, a);
	b = getParent(parent, b);
	if (a == b) return 1;
	else return 0;
}